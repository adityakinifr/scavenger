name: Test Twilio Flask App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create test environment file
      run: |
        cp env_template.txt .env
        # Set dummy values for testing
        sed -i 's/your_account_sid_here/test_sid/g' .env
        sed -i 's/your_auth_token_here/test_token/g' .env
        sed -i 's/your_twilio_phone_number_here/+1234567890/g' .env
    
    - name: Test Twilio imports
      run: |
        python -c "
        from twilio.twiml.messaging_response import MessagingResponse
        from twilio.twiml.voice_response import VoiceResponse
        from twilio.rest import Client
        print('‚úÖ Twilio imports successful')
        
        # Test TwiML creation
        msg_resp = MessagingResponse()
        msg_resp.message('Test')
        voice_resp = VoiceResponse()
        voice_resp.say('Test')
        print('‚úÖ TwiML creation works')
        "
    
    - name: Test app imports and basic functionality
      run: |
        python -c "
        import sys
        sys.path.append('.')
        
        # Test imports
        try:
            from app import app
            from config import Config
            print('‚úÖ All imports successful')
        except Exception as e:
            print(f'‚ùå Import error: {e}')
            sys.exit(1)
        
        # Test app creation
        try:
            with app.test_client() as client:
                response = client.get('/')
                assert response.status_code == 200
                print('‚úÖ App responds to requests')
        except Exception as e:
            print(f'‚ùå App test error: {e}')
            sys.exit(1)
        
        print('üéâ All tests passed!')
        "
    
    - name: Test configuration validation
      run: |
        python -c "
        from config import Config
        missing = Config.validate_twilio_config()
        if not missing:
            print('‚úÖ Configuration validation works')
        else:
            print(f'‚úÖ Configuration validation correctly identifies missing: {missing}')
        " 